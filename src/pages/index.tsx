import { type NextPage } from "next";
import { SignInButton } from "@clerk/nextjs";
import { useUser } from "@clerk/nextjs";
import Head from "next/head";
import DriveAccordion from "../components/DriveAccordion";
import TeamGameSelector from "../components/TeamGameSelector"
import NoData from "../components/NoData";
import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import { getGameDataFromPlayData } from "../utils/PlayUtil";

const Home: NextPage = () => {
    const user = useUser();
    const [gameSelected, setGameSelected] = useState('')
    const [teamSelected, setTeamSelected] = useState<string>()
    const [gameData, setGameData] = useState<GameData>();

    // api.plays.deleteAll.useQuery();
    const { refetch: refetchPlays } = api.plays.getPlaysByGameId.useQuery({gameId: gameSelected}, { enabled: false });

    useEffect(() => {
        if (gameSelected) {
            refetchPlays().catch((err) => console.log(err)).then((res) => {
                if (res) {
                    setGameData(getGameDataFromPlayData(res.data!));
                    console.log('index.tsx: refetched plays', res.data);
                }
            }).catch(() => 'obligatory catch');
        }
    }, [gameSelected, refetchPlays])

    const onSelectTeam = (team: string) => {
        console.log(gameSelected, gameData)
        setTeamSelected(team);
        setGameSelected('');
        setGameData(undefined);
        console.log('index.tsx: Team selected', team);
    }

    const onSelectGame = (game: GameData) => {
        console.log('index.tsx: Game selected', game.gameId);
        setGameSelected(game.gameId);
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex justify-center h-screen">
                <div className="w-full h-full md:max-w-6xl">
                    <div className="p-4">
                        {!user.isSignedIn && <div className="flex justify-center"><SignInButton /></div> }
                        {!!user.isSignedIn && <div className="flex justify-center"><SignInButton /></div>}
                    </div>

                    <div>
                        <TeamGameSelector onSelectTeam={onSelectTeam} onSelectGame={onSelectGame} />
                    </div>

                    {gameSelected ? <DriveAccordion gameData={gameData}/> : ((!teamSelected) ? <NoData message={'Pick a team!'} /> : <NoData message={'Pick a game!'} />)}
                </div>
            </main>
        </>
  );
};

export default Home;

/**
 * const fetchData = () => {
        const playData: any[] = []; 
        const data:any = JSONData;

        const stringIfExistsOtherwiseEmptyString = (str: string | undefined) => {
            if (str) return str;
            return undefined;
        }

        const numIfExistsOtherwiseUndefined = (num: number | undefined) => {
            if (num) return num;
            return undefined;
        }

        data.forEach((play: any) => {
            playData.push({
                away_team: play.away_team,
                home_team: play.home_team,

                posteam: stringIfExistsOtherwiseEmptyString(play.posteam),
                defteam: stringIfExistsOtherwiseEmptyString(play.posteam),

                desc: play.desc,
                down: numIfExistsOtherwiseUndefined(play.down),
                drive: numIfExistsOtherwiseUndefined(play.drive),
                drive_start_yard_line: stringIfExistsOtherwiseEmptyString(play.drive_start_yard_line),
                drive_end_yard_line: stringIfExistsOtherwiseEmptyString(play.drive_end_yard_line),
                drive_end_transition: stringIfExistsOtherwiseEmptyString(play.drive_end_transition),
                drive_play_count: numIfExistsOtherwiseUndefined(play.drive_play_count),
                drive_play_id_ended: (stringIfExistsOtherwiseEmptyString(play.drive_play_id_ended))?.toString(),

                game_date: new Date(play.game_date),
                game_id: play.game_id,

                play_id: stringIfExistsOtherwiseEmptyString(play.play_id.toString()), 
                play_type: play.play_type ? play.play_type : '',
                total_away_score: play.total_away_score,
                total_home_score: play.total_home_score,

                time: play.time,

                ydstogo: play.ydstogo,
                yrdln: stringIfExistsOtherwiseEmptyString(play.yrdln),
            })
        })

        for (let i = playCount; i < playCount + 500; i++) {
            mutate(playData[i]);
        }
        setPlayCount(playCount + 500);
    }
 */